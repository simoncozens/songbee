<?xml version="1.0"?> 
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://songbee/content/css/findBar.css" type="text/css"?>
<!DOCTYPE window [
<!ENTITY % SongbeeDTD SYSTEM "chrome://songbee/locale/songbee.dtd" >
%SongbeeDTD;
<!ENTITY % findBarDTD SYSTEM "chrome://songbee/locale/findbar.dtd" >
%findBarDTD;
<!ENTITY % editPlaylistDTD SYSTEM "chrome://songbee/locale/edit-pl.dtd" >
%editPlaylistDTD;
]>

<window id="edit-pl" title="&editPlaylist.title;"
  xmlns:html="http://www.w3.org/1999/xhtml"
  onload="setup()"
onmouseup="endDrag()"
  minheight="200" minwidth="500"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
<script src="chrome://songbee/content/js/songbee.js"/>
<script src="chrome://songbee/content/playitemtypes/playitemtypes.js"/>
<script src="chrome://songbee/content/js/songbee-sql.js"/>
<script src="chrome://songbee/content/js/xslt.js"/>
<script src="chrome://songbee/content/js/songtreeview.js"/>
<script src="chrome://songbee/content/js/findBar.js"/>
<script src="chrome://songbee/content/js/export.js"/>
<keyset>
  <key id="close_cmd" keycode="VK_ESCAPE" oncommand="escapeOut();"/>
  <key id="focus_search" key="f" modifiers="shift any accel" oncommand="document.getElementById('find-field').focus()"/>
</keyset>
<toolbox>
	
	<menubar id="main-menu">
	    <menu id="file-menu" label="File">
	        <menupopup id="file-popup">
	            <menuitem label="&editPlaylist.save;" oncommand="saveDOC()"/>
	            <menuseparator/>
	            <menuitem label="Preferences" oncommand="preferences()"/>
	            <menuseparator/>
	            <menuitem label="Close" oncommand="window.close()"/>
	        </menupopup>
	    </menu>
	    <menu id="create-menu" label="Create...">
	        <menupopup id="create-popup">
	        </menupopup>
	    </menu>
	</menubar>
</toolbox>

<popupset>
    <popup id="songpopup">
        <menuitem label="&editPlaylist.addToPl;" oncommand="doTreeDoubleClick()"/>
        <menuitem label="&editPlaylist.editSong;" oncommand="editSong()"/>
        <menuitem label="&editPlaylist.deleteSong;" oncommand="deleteSong()"/>
    </popup>
</popupset>

        <stack onmousemove="if(dragging) { doMove(event) }" id="canvas" flex="1">
<vbox flex="1" id="box1">
    <hbox flex="1" id="box2">
        <vbox flex="1" label="&songbee.playlist;">
        <listbox id="playlistlist" onkeypress="if (event.keyCode == 8) { deleteHighlighted() }" flex="1" minheight="400"/>
        </vbox>
        <splitter/>
        <vbox flex="1">
        <tree id="songlist" minwidth="200" flex="1" seltype="single"
        minheight="200" onselect="updatePreview()"
        context="treepopup"
        onclick="updatePreview()" ondblclick="doTreeDoubleClick()">
            <treecols>
                <treecol id="title" label="&songbee.title;" flex="1"/>
                <treecol id="first_line" label="&songbee.firstLine;" flex="2"/>
                <treecol id="id" label="" hidden="true" ignoreincolumnpicker="true"/>
            </treecols>
            <treechildren context="songpopup" onmousedown="createFakeLI(event)" onmouseup="endDrag()"/>
        </tree>
        <splitter/>
        <iframe id="preview" flex="1" name="preview" src="chrome://songbee/content/blank-song.html"/>
        </vbox>
    </hbox>

    <iframe id="save" collapsed="1" name="save" src="chrome://songbee/content/blank-word.html" style="visibility:collapse"/>

    <toolbar id="FindToolbar" hidden="false" align="center" fullscreentoolbar="true">
      <label control="find-field" id="find-label" class="find-fast"/>
        <textbox id="find-field" 
        oninput="gFindBar.find(this.value);"
                onkeypress="gFindBar.onFindBarKeyPress(event);"
                onblur="gFindBar.onFindBarBlur();"
                oncompositionstart="gFindBar.onFindBarCompositionStart(event);"                oncompositionend="gFindBar.onFindBarCompositionEnd(event);"/>
      <spacer flex="1"/>
      <button id="save-changes" label="&songbee.save;" oncommand="savechanges(); window.close()" style="list-style-image: none"/>
    </toolbar>
    </vbox>
        </stack>
<script>
    var pl = Playlist.retrieve(window.arguments[0]);
    var target = document.getElementById("playlistlist");

    /* Set up the Create... menu */
    var create = document.getElementById("create-popup");
    for (var type in Songbee.ItemTypes) {
        var item = document.createElement("menuitem");
        item.setAttribute("label", Songbee.ItemTypes[type].label);
        item.setAttribute("oncommand", "Songbee.ItemTypes."+type+".create(pl)" );
        create.appendChild(item);
    }

    var canvas = document.getElementById("canvas");
    var initial_order = new Array;

function setup () {
    pl.items(function (i) {
        var li = document.createElement("listitem");
        li.setAttribute("onmousedown", "dragging = event.target;");
        li.setAttribute("label", i.title());
        li.playitem = i;
		li.piType = i.type();
		li.piData = i.data();
        if (i.type()  == 'song') li.piSong = i.song()._id;
        target.appendChild(li);
        initial_order.push(i._id);
    });

    setupTree();
}

var dragging = 0;
var dragSetup = 0;

function beginToDrag (t) {
    //jsdump("Begin to drag , dragging is "+dragging);
        var list = t.parentNode;
        if (list) list.removeChild(t);
        canvas.insertBefore(t, canvas.firstChild);
        window.setCursor("grabbing");

        // Stop rearranging the window while we drag stuff about
        setFlex(0);
        dragSetup = 1;
        //doMove(evt);
}

function setFlex(f) {
    var elems = [ "box1", "box2", "playlistlist" ];
    for (var i in elems) { 
        var e = document.getElementById(elems[i]);
        e.setAttribute("flex", f);
    }
}

function createFakeLI(event) {
    if (event.button != 0) return; // Only want left mouse click
    var row = tree.treeBoxObject.getRowAt(event.clientX, event.clientY);
    var song = tree.view.getCellText(row, tree.columns.getNamedColumn("id"));
    dragging = itemToListItem(song, "song", "");
    // jsdump("Set to drag "+song);
}

function doTreeDoubleClick() {
    addToPlaylist(selectedSong(), "song", ""); 
}

// Don't remove this, other playitemtypes need it.
function addToPlaylist(song, type, data, label) {
    var li = itemToListItem(song, type, data, label);
    target.appendChild(li);
}

function itemToListItem(song, type, data, label) {
    // Convert to listitem
	var li = document.createElement("listitem");
    li.setAttribute("onmousedown", "dragging = event.target;");
	li.piType = type;
	li.piData = data;
	if (type == "song") {
        if (!song) return;
		var s = Song.retrieve(song); 
		li.setAttribute("label", s.title());
		if (!s) { alert("Bug: Couldn't get a song we've clicked on") }
		li.piSong = s.id();
	} else {
        li.setAttribute("label", label);
	}
    return li;
}

function doMove(e) {
    //dragging.style["position"] = "absolute";
    if (!dragSetup) { beginToDrag(dragging) }
    dragging.setAttribute("left", e.clientX);
    dragging.setAttribute("top", e.clientY);
    dragging.setAttribute("ordinal", 3);
}

function box (e) {
    var bo = e.boxObject;
    return {left: bo.screenX, right: bo.screenX+bo.width, top: bo.screenY, bottom: bo.screenY+bo.height };
}

function completelyOutside (item, container) {
    var iBox = box(item);
    var cBox = box(container);
    //jsdump("Item : L"+iBox.left+" T"+iBox.top+" R"+iBox.right+ " B"+iBox.bottom);
    //jsdump("Container : L"+cBox.left+" T"+cBox.top+" R"+cBox.right+ " B"+cBox.bottom);
    if (iBox.left   &gt; cBox.right  ) return 1;
    if (iBox.right  &lt; cBox.left   ) return 1;
    if (iBox.top    &gt; cBox.bottom ) return 1;
    if (iBox.bottom &lt; cBox.top    ) return 1;
    //jsdump("Falls inside");
    return 0;
}
function endDrag() {
    //jsdump("End drag called; dragging is "+dragging);
    setFlex(1);
    window.setCursor("auto");
    var wasDragging = dragging;
    dragSetup = 0;
    dragging = 0;
    if (!wasDragging) return;
    if (!wasDragging.parentNode) return;
    var list = document.getElementById("playlistlist");
    if ( completelyOutside(wasDragging, list) ) {
        //jsdump("Fell outside");
        dragging.parentNode.removeChild(dragging);
        return;
    }
    // Create the new element
    var newElem = document.createElement("listitem");
    newElem.setAttribute("label", wasDragging.label);
	var toCopy = ["piSong", "piData", "piType"];
	for (var a in toCopy) newElem[toCopy[a]] = wasDragging[toCopy[a]];
    newElem.setAttribute("onmousedown", "dragging = event.target;");

    // Where to put it?
    var dragBox = box(wasDragging);
    var items = list.getElementsByTagName( "listitem" );
    for (var i =0; i &lt; items.length; i++) {
        var off= items[i].boxObject.screenY;
        if (dragBox.top &lt;= off) {
            wasDragging.parentNode.removeChild(wasDragging);
            list.insertBefore(newElem , items[i]);
            list.selectItem(newElem);
            list.currentItem = newElem;
            dragging = 0; 
            return;
        }
    }
    wasDragging.parentNode.removeChild(wasDragging);
    list.appendChild(newElem);
    list.selectItem(newElem);
    list.currentItem = newElem;
    dragging = 0;
}
    function deleteHighlighted() { 
        if (target.selectedItem) target.removeChild(target.selectedItem);
    }

function isChanged(children) {
    if (children.length != initial_order.length) return 1;
    for (var i =0; i &lt; children.length; i++) {
        if (!children[i].playitem) return 1;
		if (children[i].playitem._id != initial_order[i]) return 1;
    }
    return 0;
}

var promptService =
Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                    .getService(Components.interfaces.nsIPromptService);

function escapeOut() {
    if (isChanged(target.childNodes))
        if (!promptService.confirm(window, "&editPlaylist.exitUnsaved;", "&editPlaylist.loseChanges;"))
            return;
    window.close();
}
    
function savechanges() {
    // First, do we need to?
    if (!isChanged(target.childNodes))
        return;
    pl.tidy_up();
    for (var i =0; i &lt; target.childNodes.length; i++) {
        var node = target.childNodes[i]
        pl.add_item(node.piSong, i+1, node.piType, node.piData);
    }
	window.arguments[1].setup(); // Redraw the main (playlist list) window
}

function deleteSong() {
    var song = selectedSong();
    if (!song) return;
    if (!promptService.confirm(window, "&editPlaylist.deleteSong;", "&editPlaylist.permanentDelete;"))
        return;
    Song.retrieve(song).drop();
    // Start again
    refreshTree();
}

function editSong() {
    var song = selectedSong();
    if (!song) return;
    Songbee.ItemTypes.song.edit(song);
    refreshTree();
}

function preferences() {
	window.openDialog("chrome://songbee/content/preferences.xul",
	"preferences", "chrome, dialog", pl._id);
}

</script>
</window>
